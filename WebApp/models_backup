from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager,AbstractUser
from django.contrib.auth.models import PermissionsMixin

# Create your models here.

#
# class UserManager(BaseUserManager):
#    def create_user(self, email, password=None, **kwargs):
#         if not email:
#             raise ValueError('Users must have a valid email address.')
#
#         if not kwargs.get('username'):
#
#             raise ValueError('Users must have a valid username.')
#
#         account = self.model(
#         email=self.normalize_email(email), username=kwargs.get('username')
#         )
#         account.is_staff=False
#         account.set_password(password)
#         account.save()
#         return account
#
#     def create_superuser(self,email,password,**kwargs):
#         account = self.create_user(email, password, **kwargs)
#         account.is_staff = True
#         account.is_admin = True
#         account.save()
#
#         return account
#
#
# class User(AbstractUser):
#     email = models.EmailField(max_length=50, primary_key=True, null=False)
#     username = models.CharField(max_length=50, unique=True)
#     first_name = models.CharField(max_length=50, blank=False)
#     last_name = models.CharField(max_length=50, blank=False)
#     is_admin = models.BooleanField(default=False)
#     is_staff= models.BooleanField(default=False)
#     date_of_birth = models.DateField(null=True)
#     is_active = models.BooleanField(default=True)
#     created_at = models.DateTimeField(auto_now_add=True)
#     updated_at = models.DateTimeField(auto_now=True)
#     image = models.ImageField(blank=True)
#
#     gender_choices = (
#         ('m', 'Male'),
#         ('f', 'Female'),
#     )
#     gender = models.CharField(max_length=10, choices=gender_choices,)
#     objects = UserManager()
#     USERNAME_FIELD = 'email'
#     REQUIRED_FIELDS = ['username']
#
#     def __str__(self):
#         return self.username
#
#     def has_perm(self, perm, obj=None):
#         return self.is_admin
#
#     def has_module_perms(self, app_label):
#         return self.is_admin


class Address(models.Model):
    id=models.CharField(primary_key=True,blank=False,auto_created=True,max_length=150)
    #user=models.ForeignKey(User,on_delete=models.CASCADE)
    addressline1=models.CharField(max_length=150)
    street=models.CharField(max_length=150)
    area=models.CharField(max_length=150)
    city=models.CharField(max_length=150)
    state=models.CharField(max_length=150)
    pincode=models.CharField(max_length=150)
    country=models.CharField(max_length=150)


class venue(models.Model):
    id=models.CharField(primary_key=True,blank=False,max_length=150,auto_created=True)
    #user=models.ForeignKey(User,on_delete=models.CASCADE)
    capacity=models.CharField(max_length=150)
    ac=models.BooleanField(default=False)
    contactno=models.CharField(max_length=150,unique=True)
    address=models.ForeignKey(Address,on_delete=models.CASCADE)
    cost=models.CharField(max_length=150)
    is_active=models.BooleanField(default=True)

#class decorationservice

class events(models.Model):
    id=models.CharField(primary_key=True,auto_created=True,max_length=150)
    #user=models.ForeignKey(User, on_delete=models.SET_NULL,null=True)
    venue=models.ForeignKey(venue,on_delete=models.SET_NULL,null=True)
    name=models.CharField(max_length=200,blank=False)
    description=models.CharField(max_length=200,blank=False)
    #typeofevent
    date=models.DateTimeField(blank=False)
    starttime=models.DateTimeField(blank=False)
    endtime=models.DateTimeField(blank=False)
    expected_people=models.CharField(max_length=150,blank=False)
    confirmed_people=models.CharField(max_length=150,blank=False)


class invitation(models.Model):
    id=models.CharField(primary_key=True,max_length=150)
    event=models.ForeignKey(events,max_length=100,on_delete=models.SET_NULL,null=True)
    needprinted=models.BooleanField(default=False)
    iscustomized=models.BooleanField(default=False)

